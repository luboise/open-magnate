// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// {
// 	"type": "sqlite",
// 	"database": "./database/database.sqlite",
// 	"synchronize": true,
// 	"logging": false,
// 	"entities": ["src/database/entity/**/*.ts"],
// 	"migrations": ["src/database/migration/**/*.ts"],
// 	"subscribers": ["src/database/subscriber/**/*.ts"]
// }

model UserSession {
  sessionKey  String       @id @unique @default(uuid())
  browserId   String       @unique
  name        String       @default("")
  lobbyPlayer LobbyPlayer?
}

model LobbyPlayer {
  lobby   Lobby @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  lobbyId Int

  userSession UserSession @relation(fields: [userId], references: [sessionKey])
  userId      String      @unique

  timeJoined DateTime @default(now())

  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  restaurantId Int

  @@unique([restaurantId, lobbyId])
}

model Lobby {
  id          Int     @id @default(autoincrement()) @map("lobby_id")
  name        String
  password    String?
  playerCount Int

  players LobbyPlayer[]

  inviteCode String

  gameState GameState?
}

model Restaurant {
  id   Int    @id @default(autoincrement()) @map("restaurant_id")
  name String

  lobbyPlayers LobbyPlayer[]
}

model GameState {
  // ID fields
  id    Int   @id @map("gamestate_id")
  lobby Lobby @relation(fields: [id], references: [id], onDelete: Cascade)

  // Scalar fields
  rawMap        String @db.VarChar(2048)
  currentTurn   Int	@default(1)
  currentPlayer Int	@default(1)

  // Relations
  houses             House[]
  marketingCampaigns MarketingCampaign[]

  players GamePlayer[]
}

model House {
  // Used only for items whicv reference this house. For example, demand and gardens
  id Int @id @default(autoincrement()) @map("house_id")

  gameId Int
  game   GameState @relation(fields: [gameId], references: [id], onDelete: Cascade)

  number Int @map("house_number")

  x           Int
  y           Int
  demandLimit Int @default(3)

  garden Garden?
  Demand Demand[]

  // Game 1 can only have a single of house x
  @@unique([gameId, number])
}

model Garden {
  houseId Int   @id @default(autoincrement())
  house   House @relation(fields: [houseId], references: [id], onDelete: Cascade)

  x Int
  y Int

  orientation ORIENTATION @default(HORIZONTAL)
}

model Demand {
  houseId Int   @id @default(autoincrement())
  house   House @relation(fields: [houseId], references: [id], onDelete: Cascade)

  type DEMAND_TYPE
}

model MarketingCampaign {
  gameId Int
  game   GameState @relation(fields: [gameId], references: [id], onDelete: Cascade)

  number Int

  type MARKETING_TYPE

  x Int
  y Int

  turnsRemaining Int

  orientation ORIENTATION

  @@unique([gameId, number])
}

model GamePlayer {
  gameId Int
  game   GameState @relation(fields: [gameId], references: [id], onDelete: Cascade)

  number Int @map("player_number")

  money      Int  @default(0)
  milestones Json
  employees  Json

  @@unique([gameId, number])
}

enum ORIENTATION {
  HORIZONTAL
  VERTICAL
}

enum DEMAND_TYPE {
  BURGER
  PIZZA
  LEMONADE
  BEER
  COLA
}

enum MARKETING_TYPE {
  BILLBOARD
  MAILBOX
  PLANE
  RADIO
}
